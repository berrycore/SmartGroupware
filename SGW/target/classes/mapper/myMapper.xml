<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.myMapper">

	<!-- SM_COMPANY -->
	<select id="getCompany" parameterType="String" resultType="model.Company">
		select * from SM_COMPANY where company_id = #{company_id}
	</select>

	<!-- SM_USERS --><!-- deprecated -->
	<select id="getUserAccount" parameterType="String" resultType="model.User">
		select * from SM_USERS where user_id = #{user_id}
	</select>
	<select id="getUserAccountCount" parameterType="String" resultType="Integer">
		select count(*) from SM_USERS where user_id = #{user_id} 
	</select>
	
	<!-- getUserList  -->
	<resultMap type="model.Team" id="Team">
		<result column="TEAM_ID" property="team_id" />
		<result column="TEAM_NAME" property="team_name" />
	</resultMap>
	<resultMap type="model.Position" id="Position">
		<result column="POSITION_ID" property="position_id" />
		<result column="POSITION_NAME" property="position_name" />
	</resultMap>
	<resultMap type="model.User" id="UserJoin">
		<result column="user_id" property="user_id" />
		<result column="user_name" property="user_name" />
		<result column="user_email" property="user_email" />
		<result column="user_phone" property="user_phone" />
		<result column="user_description" property="user_description" />
		<result column="user_date_last_login" property="user_date_last_login" />
		<result column="user_date_last_pw_changed" property="user_date_last_pw_changed" />
		<collection property="team" resultMap="Team" />
		<collection property="position" resultMap="Position" />
	</resultMap>
	<select id="getUserList" resultMap="UserJoin">
		SELECT 
			U.USER_ID, 
			U.USER_NAME,
			U.USER_EMAIL,
			U.USER_PHONE,
			U.USER_DESCRIPTION,
			U.USER_DATE_LAST_LOGIN,
			U.USER_DATE_LAST_PW_CHANGED,
			T.TEAM_NAME, 
			P.POSITION_NAME
		FROM SM_USERS U, SM_TEAMS T, SM_POSITION P 
		WHERE U.TEAM_ID = T.TEAM_ID AND U.POSITION_ID = P.POSITION_ID
	</select>
	
	<!-- getUserByUserId -->
	<select id="getUserByUserId" resultMap="UserJoin" parameterType="String">
		SELECT 
			U.USER_ID, 
			U.USER_NAME,
			U.USER_EMAIL,
			U.USER_PHONE,
			U.USER_DESCRIPTION,
			U.USER_DATE_LAST_LOGIN,
			U.USER_DATE_LAST_PW_CHANGED,
			T.TEAM_NAME, 
			P.POSITION_NAME
		FROM SM_USERS U, SM_TEAMS T, SM_POSITION P 
		WHERE U.TEAM_ID = T.TEAM_ID AND U.POSITION_ID = P.POSITION_ID AND U.USER_ID = #{user_id}
	</select>
	
	<!-- getUserAccountByName -->
	<select id="getUserAccountByName" resultMap="UserJoin" parameterType="String">
		SELECT 
			U.USER_ID, 
			U.USER_NAME,
			U.USER_EMAIL,
			U.USER_PHONE,
			U.USER_DESCRIPTION,
			U.USER_DATE_LAST_LOGIN,
			U.USER_DATE_LAST_PW_CHANGED,
			T.TEAM_NAME, 
			P.POSITION_NAME
		FROM SM_USERS U, SM_TEAMS T, SM_POSITION P 
		WHERE U.TEAM_ID = T.TEAM_ID AND U.POSITION_ID = P.POSITION_ID AND U.USER_NAME = #{user_name}
	</select>
	
	<insert id="insertUser" parameterType="model.User">
		insert into SM_USERS (
			user_id,
			user_password,
			user_name,
			user_email,
			user_phone,
			user_description,
			team_id,
			position_id
		) 
		values(
			#{user_id},
			#{user_password},
			#{user_name},
			#{user_email},
			#{user_phone},
			#{user_description},
			#{team_id},
			#{position_id}
		)
	</insert>
	
	<update id="updateUserInfoByUser" parameterType="model.User">
		update SM_USERS set
			user_phone = #{user_phone},
			user_description = #{user_description}
		where
			user_id = #{user_id}
	</update>
	<update id="updateUserInfoByAdmin" parameterType="model.User">
		update SM_USERS set
			user_name = #{user_name},
			user_phone = #{user_phone},
			user_description = #{user_description},
			team_id = #{team_id},
			position_id = #{position_id}
		where
			user_id = #{user_id}
	</update>
	<update id="updateUserPassword" parameterType="model.User">
		update SM_USERS set
			user_password = #{user_password},
			user_date_last_pw_changed = #{user_date_last_pw_changed}
		where
			user_id = #{user_id}
	</update>
  <update id="updateUserLastLoginTime" parameterType="model.User">
    update SM_USERS set
      user_date_last_login = #{user_date_last_login}
    where
      user_id = #{user_id}
  </update>
	
	<!-- SM_NOTICE -->
	<select id="getNoticeList" resultType="model.Notice">
		select * from SM_NOTICE
	</select>
	<insert id="writeNotice" parameterType="model.Notice">
		insert into SM_NOTICE (
			notice_title,
			notice_writer_name,
			notice_attached_file_name,
			notice_date_regist,
			notice_content,
			admin_id
		) values (
			#{notice_title},
			#{notice_writer_name},
			#{notice_attached_file_name},
			#{notice_date_regist},
			#{notice_content},
			#{admin_id}
		)
	</insert>
	<select id="selectNotice" parameterType="String" resultType="model.Notice">
		select * from SM_NOTICE where notice_id = #{notice_id}
	</select>
	<update id="updateNotice" parameterType="model.Notice">
  	update SM_NOTICE set
      notice_title = #{notice_title},
      notice_attached_file_name = #{notice_attached_file_name},
      notice_content = #{notice_content}
    where
      notice_id = #{notice_id}
	</update>
	<delete id="deleteNotice" parameterType="String">
		delete from SM_NOTICE where notice_id = #{notice_id}
	</delete>
	
	
	<!-- SM_BOARD -->
	<insert id="writeBoard" parameterType="model.Board">
		insert into SM_BOARD (
			board_title,
			board_content,
			board_writer_name,
			board_date_regist,
			user_id
		) values (
			#{board_title},
			#{board_content},
			#{board_writer_name},
			#{board_date_regist},
			#{user_id}
		)
	</insert>
	
	<!-- getBoardList -->
  <!-- deprecated -->
	<resultMap type="model.User" id="UserInfo">
		<result column="user_id" property="user_id"/>
		<result column="user_name" property="user_name" />
		<result column="user_email" property="user_email" />
	</resultMap>
  <!-- deprecated -->
	<resultMap type="model.Board" id="BoardJoinUser" >
		<result column="board_id" property="board_id" />
		<result column="board_title" property="board_title" />
		<result column="board_writer_name" property="board_writer_name" />
		<result column="board_date_regist" property="board_date_regist" />
		<result column="user_id" property="user_id" />
		<collection property="user" resultMap="UserInfo"></collection>
	</resultMap>
  <!-- deprecated -->
	<select id="getBoardList" resultMap="BoardJoinUser">
		SELECT
			B.BOARD_ID,
			B.BOARD_TITLE,
			B.BOARD_WRITER_NAME,
			B.BOARD_DATE_REGIST,
			U.USER_ID
		FROM
			SM_BOARD B,
			SM_USERS U
		WHERE 
			B.USER_ID = U.USER_ID
		ORDER BY B.BOARD_ID DESC
	</select>
  
  <select id="getBoardListAndReplyCount" resultType="model.Board">
    SELECT
      BOARD_ID,
      BOARD_TITLE,
      BOARD_WRITER_NAME,
      BOARD_DATE_REGIST,
      (SELECT COUNT(*) FROM SM_REPLY WHERE SM_BOARD.BOARD_ID = SM_REPLY.PARENT_BOARD_ID) AS REPLY_COUNT 
    FROM
      SM_BOARD
    ORDER BY BOARD_ID DESC
  </select>

	
	<select id="selectBoard" parameterType="Integer" resultType="model.Board">
		select * from SM_BOARD where board_id = #{board_id}
	</select>
	
	
	<!-- SM_REPLY -->
	<select id="getReplyList" parameterType="String" resultType="model.Reply">
		select * from SM_REPLY where parent_board_id = #{parent_board_id} order by reply_date_regist
	</select>
	<insert id="insertReply" parameterType="model.Reply">
		insert into SM_REPLY (
			reply_writer_name,
			reply_content,
			reply_date_regist,
			parent_board_id
		) values (
			#{reply_writer_name},
			#{reply_content},
			#{reply_date_regist},
			#{parent_board_id}
		)
	</insert>
  <select id="getReplyCount" parameterType="String">
    select count(*) from SM_REPLY where parent_board_id = #{parent_board_id}
  </select>
	
	
	<!-- SM_TEAMS -->
	<select id="getTeamList" resultType="model.Team">
		select * from SM_TEAMS
	</select>
	<select id="getTeamCount" resultType="Integer">
		select count(*) from SM_TEAMS
	</select>
	<insert id="insertTeam" parameterType="model.Team">
		insert into SM_TEAMS values(#{team_id}, #{team_name}, #{team_parent_id})
	</insert>
	
	
	<!-- SM_POSITION -->
	<insert id="insertPosition">
		insert into SM_POSITION  values(#{position_id} ,#{position_name})
	</insert>
	<select id="getPositionCount" resultType="Integer">
		select count(*) from SM_POSITION
	</select>
	<select id="getPositionList" resultType="model.Position" >
		select * from SM_POSITION order by position_id
	</select>
  
  <!-- SM_ADM -->
  <select id="getAdminAccountCnt" resultType="Integer" parameterType="String">
    select count(*) from SM_ADM where admin_id = #{admin_id}
  </select>
  <insert id="insertSgwAdmin" parameterType="model.SgwAdmin" >
  	insert into SM_ADM (
  		admin_id,
  		admin_password,
  		admin_name,
  		admin_date_created,
  		admin_access_ip
  	) values (
  		#{admin_id},
  		#{admin_password},
  		#{admin_name},
  		#{admin_date_created},
  		#{admin_access_ip}
  	)
  </insert>
  <select id="getAdminAccount" resultType="model.SgwAdmin" parameterType="String">
  	select * from SM_ADM where admin_id = #{admin_id}
  </select>
  <select id="getAdminAccountList" resultType="model.SgwAdmin">
  	select admin_id, admin_name, admin_date_created, admin_date_last_login, admin_access_ip, admin_date_last_pw_changed from SM_ADM 
  </select>
  <update id="updateAdminLastLoginTime" parameterType="model.SgwAdmin">
  	update SM_ADM set
      admin_date_last_login = #{admin_date_last_login}
    where
      admin_id = #{admin_id}
  </update>
  <update id="changeAdminPassword" parameterType="model.SgwAdmin">
  	update SM_ADM set
  		admin_password = #{admin_password},
  		admin_date_last_pw_changed = #{admin_date_last_pw_changed}
 		where
 			admin_id = #{admin_id}
  </update>
  
  <!-- SM_ELEC_DOCUMENT -->
  <select id="getDocumentCount" resultType="Integer">
  	select count(*) from SM_ELEC_DOCUMENT
  </select>
  <insert id="writeNewElecDocument" parameterType="model.ElecDocument">
  	insert into SM_ELEC_DOCUMENT(
		   document_id,
			 document_title,
			 document_content,
			 first_id,
			 first_name,
			 first_status,
			 first_approval_date,
			 second_id,
			 second_name,
			 second_status,
			 second_approval_date,
			 third_id,
			 third_name,
			 third_status,
			 third_approval_date,
			 fourth_id,
			 fourth_name,
			 fourth_status,
			 fourth_approval_date,
			 final_id,
			 final_name,
			 final_status,
			 final_approval_date,
			 document_attached_file_name
		) values (
	 		 #{document_id},
			 #{document_title},
			 #{document_content},
			 #{first_id},
			 #{first_name},
			 #{first_status},
			 #{first_approval_date},
			 #{second_id},
			 #{second_name},
			 #{second_status},
			 #{second_approval_date},
			 #{third_id},
			 #{third_name},
			 #{third_status},
			 #{third_approval_date},
			 #{fourth_id},
			 #{fourth_name},
			 #{fourth_status},
			 #{fourth_approval_date},
			 #{final_id},
			 #{final_name},
			 #{final_status},
			 #{final_approval_date},
			 #{document_attached_file_name}
	 	)
  </insert>
  <select id="getElecDocumentList" resultType="model.ElecDocument">
    select * from SM_ELEC_DOCUMENT ORDER BY FIRST_APPROVAL_DATE DESC
  </select>
  <select id="selectElecDocument" parameterType="String" resultType="model.ElecDocument">
    select * from SM_ELEC_DOCUMENT where document_id = #{document_id}
  </select>
  <select id="selectProcessingDocumentList" parameterType="String" resultType="model.ElecDocument">
    select * from SM_ELEC_DOCUMENT 
    where second_status = 'onProcessing' and second_id = #{user_id}
    or third_status = 'onProcessing' and third_id = #{user_id}
    or fourth_status = 'onProcessing' and fourth_id = #{user_id} 
    or final_status = 'onProcessing' and final_id = #{user_id}
    ORDER BY FIRST_APPROVAL_DATE DESC
  </select>
  <select id="selectCompletedDocumentList" parameterType="String" resultType="model.ElecDocument">
    select * from SM_ELEC_DOCUMENT 
    where final_status = 'completed'
    ORDER BY FIRST_APPROVAL_DATE DESC
  </select>
  
  <update id="approveSecondStatus">
    update SM_ELEC_DOCUMENT set second_status = 'completed', second_approval_date = #{time_stamp}
    where second_status = 'onProcessing' and second_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="approveThirdStatus">
    update SM_ELEC_DOCUMENT set third_status = 'completed' , third_approval_date = #{time_stamp}
    where third_status = 'onProcessing' and third_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="approveFourthStatus">
    update SM_ELEC_DOCUMENT set fourth_status = 'completed' , fourth_approval_date = #{time_stamp}
    where fourth_status = 'onProcessing' and fourth_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="approveFinalStatus">
    update SM_ELEC_DOCUMENT set final_status = 'completed' , final_approval_date = #{time_stamp}
    where final_status = 'onProcessing' and final_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="rejectSecondStatus">
    update SM_ELEC_DOCUMENT set second_status = 'rejected', second_approval_date = #{time_stamp}
    where second_status = 'onProcessing' and second_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="rejectThirdStatus">
    update SM_ELEC_DOCUMENT set third_status = 'rejected' , third_approval_date = #{time_stamp}
    where third_status = 'onProcessing' and third_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="rejectFourthStatus">
    update SM_ELEC_DOCUMENT set fourth_status = 'rejected' , fourth_approval_date = #{time_stamp}
    where fourth_status = 'onProcessing' and fourth_id = #{user_id} and document_id = #{document_id}
  </update>
  <update id="rejectFinalStatus">
    update SM_ELEC_DOCUMENT set final_status = 'rejected' , final_approval_date = #{time_stamp}
    where final_status = 'onProcessing' and final_id = #{user_id} and document_id = #{document_id}
  </update>
  
</mapper>
